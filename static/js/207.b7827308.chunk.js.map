{"version":3,"file":"static/js/207.b7827308.chunk.js","mappings":"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","sources":["pages/VanillaReduxPage/Users/EditUser/EditUser.jsx","redux/vanilla/users/users-selectors.js","redux/vanilla/users/users-actions.js","webpack://react_training_temp/./src/shared/components/ToggleBtn/toggle-btn.module.scss?5f01","shared/components/ToggleBtn/ToggleBtn.jsx","shared/hooks/useForm.js","webpack://react_training_temp/./src/shared/components/UserForm/user-form.module.scss?5884","shared/components/UserForm/UserForm.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// EditUser.js\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { updateUser } from \"../../../../redux/vanilla/users/users-actions\";\r\nimport { getUserById } from \"../../../../redux/vanilla/users/users-selectors\";\r\nimport UserForm from \"../../../../shared/components/UserForm/UserForm\";\r\n\r\nconst EditUser = () => {\r\n  const { id } = useParams();\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  // const user = useSelector((state) => state.users.find((u) => u.id === id));\r\n  const user = useSelector(getUserById(id));\r\n\r\n  const handleSubmit = (updatedUser) => {\r\n    dispatch(updateUser(updatedUser));\r\n    navigate(\"/redux-vanilla/users\");\r\n  };\r\n\r\n  return user ? <UserForm initialValues={user} onSubmit={handleSubmit} /> : <p>User not found</p>;\r\n};\r\n\r\nexport default EditUser;","// This is used in a component that renders or collects data;\r\n// Together with the useSelector() hook - to clean up its syntax;\r\n\r\nexport const getUsers = store => store.users;\r\n\r\nexport const getUserById = (id) => (store) => store.users.find((u) => u.id === id);","import { ADD_USER, DELETE_USER, UPDATE_USER } from \"./users-types\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nexport const setUsers = (users) => ({\r\n  type: \"SET_USERS\",\r\n  payload: users,\r\n});\r\n\r\n// export const addUser = (user) => ({\r\n//   type: \"ADD_USER\",\r\n//   payload: user,\r\n// });\r\n// another way of actions expressing\r\nexport const addUser = payload => {\r\n  return {\r\n    type: ADD_USER,\r\n    payload: {\r\n      id: nanoid(),\r\n      ...payload\r\n    },\r\n  }\r\n};\r\n\r\nexport const deleteUser = (userId) => ({\r\n  type: DELETE_USER,\r\n  payload: userId,\r\n});\r\n\r\nexport const updateUser = (updatedUser) => ({\r\n  type: UPDATE_USER,\r\n  payload: updatedUser, // This should be the full updated user object\r\n});\r\n\r\n// const newUser = {\r\n//   id: \"abc123\", name: \"John Doe\", description: \"A test user\", enabled: false\r\n// };\r\n// console.log(addUser(newUser));\r\n\r\n// In work, you can define the value of the type key in the actions.js file in different ways:\r\n// For example, put it in a separate types.js file:\r\n// export const ADD_USER = \"ADD_USER\"; or export const ADD_USER = \"user/add\";\r\n// Both cases are imported the same way in actions.js & reducers.js:\r\n// import { ADD_USER } from \"./types\";\r\n// export const addUser = (payload) => ({\r\n// type: ADD_USER, // Uses the constant instead of a string\r\n// payload,\r\n// });\r\n// Both versions work, but \"user/add\" is often better for organization in larger apps.","// extracted by mini-css-extract-plugin\nexport default {\"wrap\":\"toggle-btn_wrap__up-zm\",\"switch\":\"toggle-btn_switch__-5zD2\",\"slider\":\"toggle-btn_slider__hUCbg\",\"round\":\"toggle-btn_round__98uR0\",\"toggle__text\":\"toggle-btn_toggle__text__7CMmh\"};","import styles from \"./toggle-btn.module.scss\";\r\n\r\nconst ToggleBtn = ({ checked, onToggle, text }) => {\r\n  const handleChange = (e) => {\r\n    onToggle(e.target.checked);\r\n    console.log(\"Toggle button clicked\");\r\n  };\r\n\r\n  return (\r\n    <div className={styles.wrap}>\r\n      <label className={styles.switch}>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={checked}\r\n          // checked={isEnabled}\r\n          onChange={handleChange}\r\n        />\r\n        <span className={`${styles.slider} ${styles.round}`}></span>\r\n      </label>\r\n      {text && <span className={styles.toggle__text}>{text}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToggleBtn;\r\n","// useForm.js (Custom Hook for form handling)\r\nimport { useState } from \"react\";\r\n\r\nconst useForm = (initialValues) => {\r\n  const [values, setValues] = useState(initialValues);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value, type, checked } = e.target;\r\n    setValues((prev) => ({\r\n      ...prev,\r\n      [name]: type === \"checkbox\" ? checked : value,\r\n    }));\r\n  };\r\n\r\n  return { values, handleChange };\r\n};\r\n\r\nexport default useForm;","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"user-form_form__WOAG-\",\"formWrap\":\"user-form_formWrap__P51jw\",\"textField\":\"user-form_textField__-1CIm\",\"areaField\":\"user-form_areaField__McPih\",\"btn\":\"user-form_btn__tPGat\"};","// UserForm.js (Reusable Form Component)\r\nimport ToggleBtn from \"../ToggleBtn/ToggleBtn\";\r\nimport useForm from \"../../hooks/useForm\";\r\n\r\nimport styles from \"./user-form.module.scss\"\r\n\r\nconst UserForm = ({ initialValues, onSubmit }) => {\r\n  const { values, handleChange } = useForm(initialValues);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (values.name.trim() === \"\") return;\r\n    onSubmit(values);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>{\r\n        initialValues.id ? \"Edit User\" : \"Create New User\"}\r\n      </h2>\r\n      <form className={styles.form} onSubmit={handleSubmit}>\r\n        <div className={styles.formWrap}>\r\n          <label>Name:</label>\r\n          <input className={styles.textField}\r\n            type=\"text\" name=\"name\" value={values.name}\r\n            onChange={handleChange} required\r\n          />\r\n        </div>\r\n        <div className={styles.formWrap}>\r\n          <label>Description:</label>\r\n          <textarea className={styles.areaField}\r\n            name=\"descript\" value={values.descript}\r\n            onChange={handleChange} required\r\n          />\r\n        </div>\r\n        \r\n        <ToggleBtn\r\n          checked={values.enabled}\r\n          onToggle={() => handleChange({ target: { name: \"enabled\", value: !values.enabled } })}\r\n          text=\"Enabled\"\r\n        />\r\n        <button type=\"submit\" className={styles.btn}>\r\n          {initialValues.id ? \"Save Changes\" : \"Add User\"}\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserForm;","// This file replaces `index.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nimport { urlAlphabet } from './url-alphabet/index.js'\n\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\n\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  // First, a bitmask is necessary to generate the ID. The bitmask makes bytes\n  // values closer to the alphabet size. The bitmask calculates the closest\n  // `2^31 - 1` number, which exceeds the alphabet size.\n  // For example, the bitmask for the alphabet size 30 is 31 (00011111).\n  // `Math.clz32` is not used, because it is not available in browsers.\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  // Though, the bitmask solution is not perfect since the bytes exceeding\n  // the alphabet size are refused. Therefore, to reliably generate the ID,\n  // the random bytes redundancy has to be satisfied.\n\n  // Note: every hardware random generator call is performance expensive,\n  // because the system call for entropy collection takes a lot of time.\n  // So, to avoid additional system calls, extra bytes are requested in advance.\n\n  // Next, a step determines how many random bytes to generate.\n  // The number of random bytes gets decided upon the ID size, mask,\n  // alphabet size, and magic number 1.6 (using 1.6 peaks at performance\n  // according to benchmarks).\n\n  // `-~f => Math.ceil(f)` if f is a float\n  // `-~i => i + 1` if i is an integer\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      // A compact alternative for `for (var i = 0; i < step; i++)`.\n      let j = step | 0\n      while (j--) {\n        // Adding `|| ''` refuses a random byte that exceeds the alphabet size.\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\n\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\n\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    // It is incorrect to use bytes exceeding the alphabet size.\n    // The following mask reduces the random byte in the 0-255 value\n    // range to the 0-63 value range. Therefore, adding hacks, such\n    // as empty string fallback or magic numbers, is unneccessary because\n    // the bitmask trims bytes down to the alphabet size.\n    byte &= 63\n    if (byte < 36) {\n      // `0-9a-z`\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      // `A-Z`\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["EditUser","id","useParams","dispatch","useDispatch","navigate","useNavigate","user","useSelector","store","users","find","u","getUserById","_jsx","UserForm","initialValues","onSubmit","updatedUser","updateUser","children","addUser","payload","type","ADD_USER","_objectSpread","nanoid","deleteUser","userId","DELETE_USER","UPDATE_USER","_ref","checked","onToggle","text","_jsxs","className","styles","onChange","e","target","console","log","concat","values","setValues","useState","handleChange","name","value","prev","useForm","preventDefault","trim","required","descript","ToggleBtn","enabled","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}