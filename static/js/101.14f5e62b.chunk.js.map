{"version":3,"file":"static/js/101.14f5e62b.chunk.js","mappings":"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","sources":["redux/vanilla/filter/filter-actions.js","redux/vanilla/filter/filter-selectors.js","webpack://react_training_temp/./src/pages/VanillaReduxPage/Users/users.module.scss?5fc3","pages/VanillaReduxPage/Users/Users.jsx","redux/vanilla/users/users-actions.js","webpack://react_training_temp/./src/shared/components/ToggleBtn/toggle-btn.module.scss?5f01","shared/components/ToggleBtn/ToggleBtn.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { SET_FILTER } from \"./filter-types\";\r\n\r\nexport const setFilter = payload => {\r\n  return {\r\n    type: SET_FILTER,\r\n    payload,\r\n  }\r\n};","// This is used in a component that renders or collects data;\r\n// Together with the useSelector() hook - to clean up its syntax;\r\n\r\nexport const getFilter = (store) => {\r\n  const { users, filter } = store;\r\n  console.log(\"üõ† Current users:\", users);\r\n  console.log(\"üõ† Current filter value:\", filter);\r\n  if (filter === \"\") return users; // Reset case - show all\r\n  return users.filter(user => user.enabled === filter);\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"listWrap\":\"users_listWrap__t7aEE\",\"filterWrap\":\"users_filterWrap__G6sj8\",\"list\":\"users_list__DEzvl\",\"listItm\":\"users_listItm__ypL0q\",\"btn\":\"users_btn__0xuFJ\"};","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { deleteUser } from \"../../../redux/vanilla/users/users-actions\";\r\nimport { setFilter } from \"../../../redux/vanilla/filter/filter-actions\";\r\n// import { getUsersr } from \"../../../redux/users/users-selectors\";\r\nimport { getFilter } from \"../../../redux/vanilla/filter/filter-selectors\";\r\nimport ToggleBtn from \"../../../shared/components/ToggleBtn/ToggleBtn\";\r\nimport styles from \"./users.module.scss\";\r\n\r\nconst Users = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  // const users = useSelector(getUsers || []); // In fact, this is a section of the store;\r\n  // If there are several such sections (by different parameters);\r\n  // Then they are placed in a separate file of the Editor - selectors.js;\r\n  const users = useSelector(getFilter);\r\n  const filter = useSelector(store => store.filter); // ‚úÖ Get filter value from Redux\r\n  console.log(\"Users from Redux:\", users, Array.isArray(users) ? \"Array ‚úÖ\" : \"Not an Array ‚ùå\");\r\n  \r\n  const handleFilter = () => {\r\n    dispatch(setFilter(filter === true ? false : true));\r\n  };\r\n\r\n  const resetFilter = () => {dispatch(setFilter(\"\"));};// Reset filter\r\n\r\n  const navigate = useNavigate();\r\n\r\n  // const handleDelete = (id) => {dispatch(deleteUser(id));};\r\n  const handleDelete = (id) => {\r\n    const action = deleteUser(id);\r\n    console.log(\"üì¶ ACTIONS selected the data to be processed by the reducer: \", action); // shows the action working, without removing from the store\r\n    console.log(\"‚öôÔ∏è REDUCER removed the ACTIONS selected data: \", action);\r\n    dispatch(action); // removes from the store\r\n  };\r\n\r\n  return (\r\n  <div className={styles.listWrap}>\r\n    <h2>Users List</h2>\r\n    <div className={styles.filterWrap}>\r\n      <ToggleBtn\r\n          text=\"Enabled Filter\"\r\n          onToggle={handleFilter}\r\n          checked={filter}\r\n        />\r\n      <button className={styles.btn}\r\n          type=\"button\"\r\n          onClick={resetFilter}\r\n          disabled={filter === \"\"}\r\n        >Reset Filter\r\n      </button>\r\n    </div>  \r\n\r\n    <ul className={styles.list}>\r\n      {Array.isArray(users) ? (\r\n        users.map((user) => (\r\n          <li key={user.id} className={styles.listItm}>\r\n            <Link to={`/redux-vanilla/users/${user.id}`}>{user.name}</Link>\r\n            <button className={styles.btn}\r\n              type=\"button\" onClick={() => navigate(`/redux-vanilla/users/edit/${user.id}`)}\r\n            >Edit\r\n            </button>\r\n            <button className={styles.btn}\r\n              type=\"button\" onClick={() => handleDelete(user.id)}\r\n            >Delete\r\n            </button>\r\n          </li>\r\n        ))\r\n          \r\n      ) : (<p>Loading users...</p>)}\r\n    </ul>\r\n      \r\n    <button className={styles.btn} type=\"button\"\r\n      onClick={() => navigate(\"/redux-vanilla/users/new\")}\r\n    >Create New</button>\r\n  </div>);\r\n};\r\n\r\nexport default Users;","import { ADD_USER, DELETE_USER, UPDATE_USER } from \"./users-types\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nexport const setUsers = (users) => ({\r\n  type: \"SET_USERS\",\r\n  payload: users,\r\n});\r\n\r\n// export const addUser = (user) => ({\r\n//   type: \"ADD_USER\",\r\n//   payload: user,\r\n// });\r\n// another way of actions expressing\r\nexport const addUser = payload => {\r\n  return {\r\n    type: ADD_USER,\r\n    payload: {\r\n      id: nanoid(),\r\n      ...payload\r\n    },\r\n  }\r\n};\r\n\r\nexport const deleteUser = (userId) => ({\r\n  type: DELETE_USER,\r\n  payload: userId,\r\n});\r\n\r\nexport const updateUser = (updatedUser) => ({\r\n  type: UPDATE_USER,\r\n  payload: updatedUser, // This should be the full updated user object\r\n});\r\n\r\n// const newUser = {\r\n//   id: \"abc123\", name: \"John Doe\", description: \"A test user\", enabled: false\r\n// };\r\n// console.log(addUser(newUser));\r\n\r\n// In work, you can define the value of the type key in the actions.js file in different ways:\r\n// For example, put it in a separate types.js file:\r\n// export const ADD_USER = \"ADD_USER\"; or export const ADD_USER = \"user/add\";\r\n// Both cases are imported the same way in actions.js & reducers.js:\r\n// import { ADD_USER } from \"./types\";\r\n// export const addUser = (payload) => ({\r\n// type: ADD_USER, // Uses the constant instead of a string\r\n// payload,\r\n// });\r\n// Both versions work, but \"user/add\" is often better for organization in larger apps.","// extracted by mini-css-extract-plugin\nexport default {\"wrap\":\"toggle-btn_wrap__up-zm\",\"switch\":\"toggle-btn_switch__-5zD2\",\"slider\":\"toggle-btn_slider__hUCbg\",\"round\":\"toggle-btn_round__98uR0\",\"toggle__text\":\"toggle-btn_toggle__text__7CMmh\"};","import styles from \"./toggle-btn.module.scss\";\r\n\r\nconst ToggleBtn = ({ checked, onToggle, text }) => {\r\n  const handleChange = (e) => {\r\n    onToggle(e.target.checked);\r\n    console.log(\"Toggle button clicked\");\r\n  };\r\n\r\n  return (\r\n    <div className={styles.wrap}>\r\n      <label className={styles.switch}>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={checked}\r\n          // checked={isEnabled}\r\n          onChange={handleChange}\r\n        />\r\n        <span className={`${styles.slider} ${styles.round}`}></span>\r\n      </label>\r\n      {text && <span className={styles.toggle__text}>{text}</span>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ToggleBtn;\r\n","// This file replaces `index.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nimport { urlAlphabet } from './url-alphabet/index.js'\n\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\n\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  // First, a bitmask is necessary to generate the ID. The bitmask makes bytes\n  // values closer to the alphabet size. The bitmask calculates the closest\n  // `2^31 - 1` number, which exceeds the alphabet size.\n  // For example, the bitmask for the alphabet size 30 is 31 (00011111).\n  // `Math.clz32` is not used, because it is not available in browsers.\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  // Though, the bitmask solution is not perfect since the bytes exceeding\n  // the alphabet size are refused. Therefore, to reliably generate the ID,\n  // the random bytes redundancy has to be satisfied.\n\n  // Note: every hardware random generator call is performance expensive,\n  // because the system call for entropy collection takes a lot of time.\n  // So, to avoid additional system calls, extra bytes are requested in advance.\n\n  // Next, a step determines how many random bytes to generate.\n  // The number of random bytes gets decided upon the ID size, mask,\n  // alphabet size, and magic number 1.6 (using 1.6 peaks at performance\n  // according to benchmarks).\n\n  // `-~f => Math.ceil(f)` if f is a float\n  // `-~i => i + 1` if i is an integer\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      // A compact alternative for `for (var i = 0; i < step; i++)`.\n      let j = step | 0\n      while (j--) {\n        // Adding `|| ''` refuses a random byte that exceeds the alphabet size.\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\n\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\n\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    // It is incorrect to use bytes exceeding the alphabet size.\n    // The following mask reduces the random byte in the 0-255 value\n    // range to the 0-63 value range. Therefore, adding hacks, such\n    // as empty string fallback or magic numbers, is unneccessary because\n    // the bitmask trims bytes down to the alphabet size.\n    byte &= 63\n    if (byte < 36) {\n      // `0-9a-z`\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      // `A-Z`\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["setFilter","payload","type","SET_FILTER","getFilter","store","users","filter","console","log","user","enabled","Users","dispatch","useDispatch","useSelector","Array","isArray","navigate","useNavigate","_jsxs","className","styles","children","_jsx","ToggleBtn","text","onToggle","handleFilter","checked","onClick","resetFilter","disabled","map","Link","to","concat","id","name","action","deleteUser","handleDelete","addUser","ADD_USER","_objectSpread","nanoid","userId","DELETE_USER","updateUser","updatedUser","UPDATE_USER","_ref","onChange","e","target","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}