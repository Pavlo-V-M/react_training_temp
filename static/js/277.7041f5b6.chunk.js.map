{"version":3,"file":"static/js/277.7041f5b6.chunk.js","mappings":"2MAOA,MAoCA,EApCiBA,KACf,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,IAE3BC,IADWC,EAAAA,EAAAA,OACAC,EAAAA,EAAAA,OAcjB,OACEC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qBACJD,EAAAA,EAAAA,MAAA,QAAMG,SAfYC,IAEpB,GADAA,EAAEC,iBACkB,KAAhBX,EAAKY,OAAe,QAGlBC,EAAAA,EAAAA,MAINV,EAAS,uBAAuB,EAMDI,SAAA,EAC3BD,EAAAA,EAAAA,MAAA,SAAAC,SAAA,CAAO,SAELC,EAAAA,EAAAA,KAAA,SACEM,KAAK,OACLC,MAAOf,EACPgB,SAAWN,GAAMT,EAAQS,EAAEO,OAAOF,OAClCG,UAAQ,QAGZV,EAAAA,EAAAA,KAAA,UAAQM,KAAK,SAAQP,SAAC,kBAEpB,C,mCClCV,IA4CIM,EAAS,eAACM,EAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAAE,OACrBG,OAAOC,gBAAgB,IAAIC,WAAWN,IAAOO,QAAO,CAACC,EAAIC,IASrDD,IAHFC,GAAQ,IACG,GAEHA,EAAKC,SAAS,IACXD,EAAO,IAETA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,KAGP,GAAG,C","sources":["pages/ReduxToolkitPage/Users/UserForm/UserForm.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// components/UserForm.js\r\nimport { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { nanoid } from \"nanoid\";\r\n// import { addUser } from \"../../../../redux/actions\";\r\n\r\nconst UserForm = () => {\r\n  const [name, setName] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (name.trim() === \"\") return;\r\n\r\n    const newUser = {\r\n      id: nanoid(),\r\n      name,\r\n    };\r\n    // dispatch(addUser(newUser));\r\n    navigate(\"/redux-toolkit/users\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Create New User</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <label>\r\n          Name:\r\n          <input\r\n            type=\"text\"\r\n            value={name}\r\n            onChange={(e) => setName(e.target.value)}\r\n            required\r\n          />\r\n        </label>\r\n        <button type=\"submit\">Add User</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserForm;\r\n","// This file replaces `index.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nimport { urlAlphabet } from './url-alphabet/index.js'\n\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\n\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  // First, a bitmask is necessary to generate the ID. The bitmask makes bytes\n  // values closer to the alphabet size. The bitmask calculates the closest\n  // `2^31 - 1` number, which exceeds the alphabet size.\n  // For example, the bitmask for the alphabet size 30 is 31 (00011111).\n  // `Math.clz32` is not used, because it is not available in browsers.\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  // Though, the bitmask solution is not perfect since the bytes exceeding\n  // the alphabet size are refused. Therefore, to reliably generate the ID,\n  // the random bytes redundancy has to be satisfied.\n\n  // Note: every hardware random generator call is performance expensive,\n  // because the system call for entropy collection takes a lot of time.\n  // So, to avoid additional system calls, extra bytes are requested in advance.\n\n  // Next, a step determines how many random bytes to generate.\n  // The number of random bytes gets decided upon the ID size, mask,\n  // alphabet size, and magic number 1.6 (using 1.6 peaks at performance\n  // according to benchmarks).\n\n  // `-~f => Math.ceil(f)` if f is a float\n  // `-~i => i + 1` if i is an integer\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      // A compact alternative for `for (var i = 0; i < step; i++)`.\n      let j = step | 0\n      while (j--) {\n        // Adding `|| ''` refuses a random byte that exceeds the alphabet size.\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\n\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\n\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    // It is incorrect to use bytes exceeding the alphabet size.\n    // The following mask reduces the random byte in the 0-255 value\n    // range to the 0-63 value range. Therefore, adding hacks, such\n    // as empty string fallback or magic numbers, is unneccessary because\n    // the bitmask trims bytes down to the alphabet size.\n    byte &= 63\n    if (byte < 36) {\n      // `0-9a-z`\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      // `A-Z`\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["UserForm","name","setName","useState","navigate","useDispatch","useNavigate","_jsxs","children","_jsx","onSubmit","e","preventDefault","trim","nanoid","type","value","onChange","target","required","size","arguments","length","undefined","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase"],"sourceRoot":""}