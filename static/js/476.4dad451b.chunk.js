"use strict";(self.webpackChunkreact_training_temp=self.webpackChunkreact_training_temp||[]).push([[476],{1476:(e,t,s)=>{s.r(t),s.d(t,{default:()=>h});var r=s(4319),a=s(9846),n=s(5043),i=s(7940),d=s(9590),o=s(579);const c=e=>{let{"nested\u0421ode":t}=e;const[s,r]=n.useState(t||""),a=n.useCallback(((e,t)=>{console.log("val:",e),r(e)}),[]);return(0,o.jsx)(i.Ay,{value:s,extensions:[(0,d.Q2)()],onChange:a})},l=()=>(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(a.A,{text:"When you use Vanilla Redax"}),(0,o.jsxs)("div",{children:[(0,o.jsxs)("ul",{style:{borderBottom:"2px solid #123b7d"},children:[(0,o.jsxs)("li",{children:[(0,o.jsx)("p",{children:"Redux works in tandem with React-Redux."}),(0,o.jsx)("p",{children:"The first creates a global data store, and the second provides access to receive and process them."})]}),(0,o.jsx)("li",{children:(0,o.jsx)("p",{children:"Most likely, you are loading a heavy and large tool for 5% maximum of its capabilities."})}),(0,o.jsxs)("li",{children:[(0,o.jsx)("p",{children:"You are limited to the location of Provider and Store."}),(0,o.jsx)("p",{children:"They should only be at the top level of the application."})]}),(0,o.jsx)("li",{children:(0,o.jsx)("p",{children:"You have to organize Stor, Reducers, Actions separately."})}),(0,o.jsx)("li",{children:(0,o.jsx)("p",{children:"You have a data flow from a single source of truth."})}),(0,o.jsx)("li",{children:(0,o.jsx)("p",{children:"You have a convenient tool for selecting the necessary data slice from the state."})}),(0,o.jsx)("li",{children:(0,o.jsx)("p",{children:"You can connect a component of any nesting, without exhausting prop\u0456-drilling."})})]}),(0,o.jsx)("h2",{children:"How it work ?"}),(0,o.jsxs)("ul",{style:{borderBottom:"2px solid #123b7d"},children:[(0,o.jsxs)("li",{children:["\ud83d\udee0\ufe0f Think of it as a Factory:",(0,o.jsx)("p",{children:" \ud83d\udce6 ACTIONS bring the raw material (data)."}),(0,o.jsx)("p",{children:" \u2699\ufe0f REDUCERS process the material into a final product (new state) \ud83d\uddc2\ufe0f."}),(0,o.jsx)("p",{children:" \ud83d\uddc4\ufe0f STORE holds the final product and updates it as needed \ud83d\uddc3\ufe0f."})]}),(0,o.jsxs)("li",{style:{marginBottom:"10px"},children:[" # ACTIONS - bring the raw material (data).",(0,o.jsx)(c,{"nested\u0421ode":"export const addUser = (user) => ({ type: 'ADD_USER', payload: user });"}),(0,o.jsx)("p",{children:"In this expression:"}),(0,o.jsx)("p",{children:"- Arrow function declaretion with implicit return and with a parameter (user);"}),(0,o.jsx)("p",{children:"- When this function is called, the parameter will receive an argument;"}),(0,o.jsx)("p",{children:"- Implicit return creates an object;"}),(0,o.jsx)("p",{children:"- Type & payload is a keys in the object & user is the value assigned to the payload key;"}),(0,o.jsx)("p",{children:"- Payload is a dynamic parameter that is associated with the data flow;"}),(0,o.jsx)("p",{children:"- Type is a static parameter that conditionally provides the ability to determine what action to take with the received data;"})]}),(0,o.jsxs)("li",{style:{marginBottom:"10px"},children:[(0,o.jsx)("p",{children:"Calling actions functions:"}),(0,o.jsx)("p",{children:"Directly in the actions.js, reducer.js, or index.js files for debugging :"}),(0,o.jsx)(c,{"nested\u0421ode":"const newUser = {\r id: 'abc123', \r name: 'John Doe', \r description: 'A test user', \r enabled: false}; \r console.log(addUser(newUser));"}),(0,o.jsx)("p",{children:"Inside a React component using a hook useDispatch() for updating Redux state:"}),(0,o.jsx)(c,{"nested\u0421ode":"import { useDispatch } from 'react-redux';\r const dispatch = useDispatch();\r dispatch(addUser({ \r id: 'xyz456', \r name: 'New User', \r description: 'Test', \r enabled: true }));"})]}),(0,o.jsxs)("li",{style:{marginBottom:"10px"},children:[(0,o.jsx)("p",{children:"The next two action expressions are one and the same. The difference is in how the dynamic payload parameter for the function is defined:"}),(0,o.jsx)(c,{"nested\u0421ode":"export const addUser = user => {return { type: 'ADD_USER', payload: user,}};"}),(0,o.jsx)(c,{"nested\u0421ode":"export const addUser = payload => {return { type: 'ADD_USER', payload,}};"})]}),(0,o.jsxs)("li",{style:{marginBottom:"10px"},children:["# REDUCERS - process the material into a final product (new state).",(0,o.jsx)("p",{children:"A reducer is always a pure function that has this basic structure:"}),(0,o.jsx)("p",{children:"- Takes the current STATE and an ACTION as inputs parameters;"}),(0,o.jsx)("p",{children:"- Processes the ACTION based on its type;"}),(0,o.jsx)("p",{children:"- Returns the new STATE;"}),(0,o.jsx)(c,{"nested\u0421ode":" // The starting state (can be empty or preloaded data)\r const initialState = { users: [], };\r const rootReducer = (state = initialState, action) => { switch (action.type) {\r case 'ADD_USER':\r return { ...state, users: [...state.users, action.payload],};\r case 'DELETE_USER':\r return { ...state,\r users: state.users.filter(user => user.id !== action.payload),\r };\r case 'UPDATE_USER': \r return { ...state, users: state.users.map(user =>\r user.id === action.payload.id ? action.payload : user),\r };\r default: return state; // Always return the current state if no action matches\r }};\r export default rootReducer;"})]}),(0,o.jsxs)("li",{children:["How Reducers Work Step by Step",(0,o.jsx)("p",{children:"1\ufe0f\u20e3 Works together with a hook useDispatch();"}),(0,o.jsx)(c,{"nested\u0421ode":"import { useDispatch } from 'react-redux';\r const dispatch = useDispatch();\r dispatch(addUser({ id: 'xyz456', name: 'New User', description: 'Test', enabled: true }));"}),(0,o.jsx)("p",{children:"The store dispatches an action. This sends an action object to the reducer:"}),(0,o.jsx)(c,{"nested\u0421ode":"dispatch(addUser({ id: 'abc123', name: 'John Doe', description: 'Test', enabled: false }));\r { type: 'ADD_USER',\r payload: { id: 'abc123', name: 'John Doe', description: 'Test', enabled: false }}"}),(0,o.jsx)("p",{children:"2\ufe0f\u20e3 The reducer processes the action"}),(0,o.jsx)("p",{children:"When ADD_USER is dispatched - the reducer checks the action's type:"}),(0,o.jsx)(c,{"nested\u0421ode":"case 'ADD_USER':\r return { ...state, users: [...state.users, action.payload] };"}),(0,o.jsx)("p",{children:"\u2705 It takes the existing users array and adds the new user to it."}),(0,o.jsx)("p",{children:"3\ufe0f\u20e3 The store updates with new state"})]}),(0,o.jsxs)("li",{children:["Reducers Must Follow These Rules",(0,o.jsx)("p",{children:"They must be pure functions (no API calls, no modifying external variables)."}),(0,o.jsx)("p",{children:"They must return a new state (never mutate the existing state)."}),(0,o.jsx)("p",{children:"They must handle the default case (default: return state to avoid errors)."})]}),(0,o.jsxs)("li",{children:["Final Summary of REDUCER:",(0,o.jsx)("p",{children:"useDispatch() sends actions to the reducer."}),(0,o.jsx)("p",{children:"dispatch(actionFunction(data)) \u2192 Dispatch takes an action function that returns an action object."}),(0,o.jsx)("p",{children:"The reducer updates the store based on the action\u2019s type."}),(0,o.jsx)("p",{children:"Redux automatically updates React components when the store changes."})]})]})]})]}),h=()=>{const e=(0,r.Zp)();return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(l,{}),(0,o.jsx)("h2",{children:"Test Cases List"}),(0,o.jsx)("ul",{style:{cursor:"pointer"},children:(0,o.jsx)("li",{onClick:()=>e("users"),children:"Vanilla Users"})})]})}},9846:(e,t,s)=>{s.d(t,{A:()=>a});var r=s(579);const a=e=>{let{text:t}=e;return(0,r.jsx)(r.Fragment,{children:(0,r.jsxs)("h2",{children:[t," \ud83d\udc7e ..."]})})}}}]);
//# sourceMappingURL=476.4dad451b.chunk.js.map