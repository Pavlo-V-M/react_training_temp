{"version":3,"file":"static/js/476.4dad451b.chunk.js","mappings":"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","sources":["shared/components/CodeArea/CodeAreaComponent.jsx","pages/VanillaReduxPage/ScriptMarkup.jsx","pages/VanillaReduxPage/VanillaReduxPage.jsx","shared/components/DefMarkup/DefMarkup.jsx"],"sourcesContent":["import React from 'react';\r\nimport CodeMirror from '@uiw/react-codemirror';\r\nimport { javascript } from '@codemirror/lang-javascript';\r\n\r\nconst CodeAreaComponent = ({ nested–°ode }) => {\r\n\r\n  // const [value, setValue] = React.useState(\"export const addUser = (user) => ({type: ADD_USER, payload: user,})/};\");\r\n  const [value, setValue] = React.useState(nested–°ode || \"\"); // Default to empty string if no code is passed\r\n\r\n  const onChange = React.useCallback((val, viewUpdate) => {\r\n    console.log('val:', val);\r\n    setValue(val);\r\n  }, []);\r\n\r\n  return (\r\n    <CodeMirror \r\n      value={value} \r\n      // height=\"100px\"\r\n      // extensions={[javascript({ jsx: true })]}\r\n      extensions={[javascript()]}\r\n      onChange={onChange} \r\n    />\r\n  );\r\n};\r\n\r\nexport default CodeAreaComponent;","import DefMarkup from \"../../shared/components/DefMarkup/DefMarkup\";\r\nimport CodeAreaComponent from \"../../shared/components/CodeArea/CodeAreaComponent\";\r\n\r\nconst ScriptMarkup = () => {\r\n  // const initialCode = \"export const addUser = (user) => ({ type: ADD_USER, payload: user });\";\r\n  return (\r\n    <>\r\n      <DefMarkup // <h2> tag here\r\n        text = \"When you use Vanilla Redax\"\r\n      />\r\n      <div>\r\n        <ul style={{ borderBottom: \"2px solid #123b7d\" }}>\r\n          <li>\r\n            <p>Redux works in tandem with React-Redux.</p>\r\n            <p>The first creates a global data store, and the second provides access to receive and process them.</p>\r\n          </li>\r\n          <li>\r\n            <p>Most likely, you are loading a heavy and large tool for 5% maximum of its capabilities.</p>\r\n          </li>\r\n          <li>\r\n            <p>You are limited to the location of Provider and Store.</p>\r\n            <p>They should only be at the top level of the application.</p>\r\n          </li>\r\n          <li>\r\n            <p>You have to organize Stor, Reducers, Actions separately.</p>\r\n          </li>\r\n          <li>\r\n            <p>You have a data flow from a single source of truth.</p>\r\n          </li>\r\n          <li>\r\n            <p>You have a convenient tool for selecting the necessary data slice from the state.</p>\r\n          </li>\r\n          <li>\r\n            <p>You can connect a component of any nesting, without exhausting prop—ñ-drilling.</p>\r\n          </li>\r\n        </ul>\r\n        <h2>How it work ?</h2>\r\n        <ul style={{ borderBottom: \"2px solid #123b7d\" }}>\r\n          <li>üõ†Ô∏è Think of it as a Factory:\r\n            <p> üì¶ ACTIONS bring the raw material (data).</p>\r\n            <p> ‚öôÔ∏è REDUCERS process the material into a final product (new state) üóÇÔ∏è.</p>\r\n            <p> üóÑÔ∏è STORE holds the final product and updates it as needed üóÉÔ∏è.</p>\r\n          </li>\r\n          <li style={{ marginBottom: \"10px\" }}> # ACTIONS - bring the raw material (data).\r\n            <CodeAreaComponent\r\n              nested–°ode=\"export const addUser = (user) => ({ type: 'ADD_USER', payload: user });\"\r\n            />\r\n            <p>In this expression:</p>\r\n            <p>- Arrow function declaretion with implicit return and with a parameter (user);</p>\r\n            <p>- When this function is called, the parameter will receive an argument;</p>\r\n            <p>- Implicit return creates an object;</p>\r\n            <p>- Type & payload is a keys in the object & user is the value assigned to the payload key;</p>\r\n            <p>- Payload is a dynamic parameter that is associated with the data flow;</p>\r\n            <p>- Type is a static parameter that conditionally provides the ability to determine what action to take with the received data;</p>\r\n          </li>\r\n          <li style={{ marginBottom: \"10px\" }}>\r\n            <p>Calling actions functions:</p>\r\n            <p>Directly in the actions.js, reducer.js, or index.js files for debugging :</p>\r\n            <CodeAreaComponent\r\n              nested–°ode=\"const newUser = {\r\n              id: 'abc123', \r\n              name: 'John Doe', \r\n              description: 'A test user', \r\n              enabled: false}; \r\n              console.log(addUser(newUser));\"\r\n            />\r\n            <p>Inside a React component using a hook useDispatch() for updating Redux state:</p>\r\n            <CodeAreaComponent\r\n              nested–°ode=\"import { useDispatch } from 'react-redux';\r\n              const dispatch = useDispatch();\r\n              dispatch(addUser({ \r\n              id: 'xyz456', \r\n              name: 'New User', \r\n              description: 'Test', \r\n              enabled: true }));\"\r\n            />\r\n          </li>\r\n          <li style={{ marginBottom: \"10px\" }}>\r\n            <p>The next two action expressions are one and the same. The difference is in how the dynamic payload parameter for the function is defined:</p>\r\n            <CodeAreaComponent\r\n              nested–°ode=\"export const addUser = user => {return { type: 'ADD_USER', payload: user,}};\"\r\n            />\r\n            <CodeAreaComponent\r\n              nested–°ode=\"export const addUser = payload => {return { type: 'ADD_USER', payload,}};\"\r\n            />\r\n          </li>\r\n          <li style={{ marginBottom: \"10px\" }}># REDUCERS - process the material into a final product (new state).\r\n            <p>A reducer is always a pure function that has this basic structure:</p>\r\n            <p>- Takes the current STATE and an ACTION as inputs parameters;</p>\r\n            <p>- Processes the ACTION based on its type;</p>\r\n            <p>- Returns the new STATE;</p>\r\n            <CodeAreaComponent\r\n              nested–°ode=\" // The starting state (can be empty or preloaded data)\r\n              const initialState = { users: [], };\r\n              const rootReducer = (state = initialState, action) => { switch (action.type) {\r\n                case 'ADD_USER':\r\n                  return { ...state, users: [...state.users, action.payload],};\r\n\r\n                case 'DELETE_USER':\r\n                  return { ...state,\r\n                    users: state.users.filter(user => user.id !== action.payload),\r\n                  };\r\n\r\n                case 'UPDATE_USER': \r\n                  return { ...state, users: state.users.map(user =>\r\n                    user.id === action.payload.id ? action.payload : user),\r\n                  };\r\n\r\n                default: return state; // Always return the current state if no action matches\r\n              }};\r\n\r\n              export default rootReducer;\"\r\n            />\r\n          </li>\r\n          <li>How Reducers Work Step by Step\r\n            <p>1Ô∏è‚É£ Works together with a hook useDispatch();</p>\r\n            <CodeAreaComponent\r\n              nested–°ode=\"import { useDispatch } from 'react-redux';\r\n              const dispatch = useDispatch();\r\n              dispatch(addUser({ id: 'xyz456', name: 'New User', description: 'Test', enabled: true }));\"\r\n            />\r\n            <p>The store dispatches an action. This sends an action object to the reducer:</p>\r\n            <CodeAreaComponent\r\n              nested–°ode=\"dispatch(addUser({ id: 'abc123', name: 'John Doe', description: 'Test', enabled: false }));\r\n              { type: 'ADD_USER',\r\n              payload: { id: 'abc123', name: 'John Doe', description: 'Test', enabled: false }}\"\r\n            />\r\n            <p>2Ô∏è‚É£ The reducer processes the action</p>\r\n            <p>When ADD_USER is dispatched - the reducer checks the action's type:</p>\r\n            <CodeAreaComponent\r\n              nested–°ode=\"case 'ADD_USER':\r\n              return { ...state, users: [...state.users, action.payload] };\"/>\r\n            <p>‚úÖ It takes the existing users array and adds the new user to it.</p>\r\n            <p>3Ô∏è‚É£ The store updates with new state</p>\r\n          </li>\r\n          <li>Reducers Must Follow These Rules\r\n            <p>They must be pure functions (no API calls, no modifying external variables).</p>\r\n            <p>They must return a new state (never mutate the existing state).</p>\r\n            <p>They must handle the default case (default: return state to avoid errors).</p>\r\n          </li>\r\n          <li>Final Summary of REDUCER:\r\n            <p>useDispatch() sends actions to the reducer.</p>\r\n            <p>dispatch(actionFunction(data)) ‚Üí Dispatch takes an action function that returns an action object.</p>\r\n            <p>The reducer updates the store based on the action‚Äôs type.</p>\r\n            <p>Redux automatically updates React components when the store changes.</p>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ScriptMarkup;","import { useNavigate } from \"react-router-dom\";\r\nimport ScriptMarkup from \"./ScriptMarkup\";\r\n\r\nconst VanillaReduxPage = () => {\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <>\r\n      <ScriptMarkup />\r\n      <h2>Test Cases List</h2>\r\n      <ul style={{ cursor: \"pointer\" }}>\r\n        <li onClick={() => navigate(\"users\")}>\r\n          Vanilla Users\r\n        </li>\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default VanillaReduxPage;","const DefMarkup = ({ text }) => { \r\n  return (\r\n    <>\r\n      <h2>{text} üëæ ...</h2>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DefMarkup;"],"names":["_ref","nested–°ode","value","setValue","React","onChange","val","viewUpdate","console","log","_jsx","CodeMirror","extensions","javascript","ScriptMarkup","_jsxs","_Fragment","children","DefMarkup","text","style","borderBottom","marginBottom","CodeAreaComponent","VanillaReduxPage","navigate","useNavigate","cursor","onClick"],"sourceRoot":""}